В PHP развито ООП на уровне Java/C#: interface, abstract class, class, implements, extends, private, public, protected
Помимо развитого ООП в PHP поддерживаются Трейты (trait), они же примеси или миксины
На PHP можно писать в функциональном стиле, есть функции высшего порядка, замыкания, map/filter/reduce, есть книга с описанием продвинутых техник (аппликативы, функторы, монады): "Functional Programming in PHP" http://www.functionalphp.com/
Анонимные функции появились в PHP на 5 лет раньше, чем в Java: июнь 2009 PHP 5.3 vs март 2014 Java 8
На каждый запрос PHP очищает окружение, мы видим только параметры и тело пришедшего запрос, нет никакого глобального состояния приложения, идеальный иммутабельный сервис для обработки http запросов!
Отдельно взятый запрос обрабатывается однопоточно, но PHP-FPM (FastCGI Process Manager) сам запустит столько воркеров, сколько нужно (в сконфигурированных рамках) для обработки приходящих запросов параллельно
Массивы передаются в функции по значению - это удобно и иммутабельно
Есть деструктуризация, в том числе вложенных структур ключ=>значение ``[['x' => $a, 'y' => $b], ['x' => $c, 'y' => $d]] = [['x' => 1, 'y' => 2], ['x' => 3, 'y' => 4]];``
Работа с файлами, сетью, юникодом, большими числами т.д. (т.е. стандартная библиотека) - это тонкая прослойка к Си библиотекам, что работает быстро
Можно писать свои расширения для PHP на языках C, Go, Rust (высокопроизводительные участки кода), а затем использовать PHP как высокоуровневый DSL
Регулярные выражения в PHP под капотом используют проверенную временем библиотеку PCRE (http://www.pcre.org), что гораздо быстрее, чем собственные реализации в других языках (например Go) http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=regexdna
В PHP есть специальная оптимизация для работы с MySQL: чтобы уменьшить количество копирований памяти между процессами разработчики PHP отказались от использования libmysql (стандартная библиотека-клиент), реализовав так называемый MySQL Native Driver. Было: MySQL -> libmysql -> память процесса PHP; Стало: MySQL -> память процесса PHP http://jpauli.github.io/2014/07/21/php-and-mysql-communication-mysqlnd.html
Для PHP всегда найдётся актуальный драйвер к вашей любимой СУБД: MySQL, PostgreSQL, SQL Server, Oracle, Firebird, Informix, DB2, SQLLite, MongoDB, Redis, RethinkDB...
Doctrine - мощная и самая популярная ORM для PHP, которая элегантно реализует многие идеи из Hibernate (Java) https://ru.wikipedia.org/wiki/Doctrine
В PHP строки можно использовать как массив байт, как в Python 2. В Python 3 это поменялось - строки стали юникодными, а для работы с байтами используйте отдельный тип, что вызвало не мало проблем при переходе, усугубило раскол сообщества. В PHP тоже планировали так сделать (в не вышедшей версии PHP 6), но не сделали! Работать с юникод строками можно через специальный набор функций, например strlen() vs mb_strlen()
PHP - язык с динамической типизацией, но вы можете расставить типы перед аргументами функций и указать типы возвращаемых значений (включая примитивные типы, интерфейсы и классы), тем самым получив все преимущества статически-типизированных языков. В добавок, если указать конструкцию ``declare(strict_types=1)``, типизация станет ещё и строгой (без приведения int -> float и т.п.)!
PhpStorm - это IDE основанная на Intellij IDEA, которая по богатству фич и поддержке экосистемы языка уступает лишь самой IDEA для Java. Остальные продукты в линейке (WebStorm, RubyMine, PyCharm) явно уступают, в том числе из-за сложности статического анализа очень уж динамических языков JavaScript, Ruby и Python. В плане возможностей для статического анализа PHP ближе к Java.
Существует заблуждение, что на каждый запрос PHP заново интерпретирует весь код скрипта. На самом при первом обращении PHP читает ваши исходники, компилирует их в байт-код и сохраняет в памяти. При последующих обращениях используется уже закешированный байт-код, если файлы исходников не обвились. По умолчанию проверка исходников на наличие новых происходит не чаще чем раз 2 секунды, можно вообще отключить и всегда использовать скомпилированный заранее байт-код.
Традиционно в PHP используется блокирующий синхронный ввод-вывод - это позволяет писать программы в привычном и простом синхронном стиле. Однако, можно использовать и асинхронную парадигму, в этом случае PHP показывает производительность обработки конкурентных запросов даже большую чем Node.js https://philsturgeon.uk/php/2013/11/12/benchmarking-codswallop-nodejs-v-php/
Темп развития PHP достаточно высокий. Раз в месяц выходит релиз с багфиксами, раз в год с новой функциональностью https://secure.php.net/releases/
Каждый год выходит релиз PHP, который привносит новую функциональность. Такой мажорный релиз имеет 2 года активной поддержки с исправлениями багов и безопасности и ещё 2 года поддержки с исправлениями только по безопасности https://secure.php.net/supported-versions.php
Немного статистики коммитов на github в репозиторий PHP за месяц с 11.10.2016 по 11.11.2016: +14322/-7896. Для сравнения Python: +13325/-7992, Go: +101524/-45323, Linux: +160841/-90146
Классический PHP по скорости имеет паритет с реализацией от Facebook, которая называется HHVM. При этом в HHVM есть JIT, а в PHP пока нет, но обещают в 2018+ году.
После серии версий PHP 5.x вышла версия PHP 7.0. Номер 6 был пропущен, т.к. эта ветка достаточно долго находилась в разработке и зашла в тупик в попытке сделать все строки в Unicode (аля Python 3) https://en.wikipedia.org/wiki/PHP#PHP_6_and_Unicode http://www.slideshare.net/andreizm/the-good-the-bad-and-the-ugly-what-happened-to-unicode-and-php-6
Можно насчитать более двух десятков подкастов о PHP, около 10 из них выходят регулярно https://www.phppodcasts.com/
Ежемесячно в блоге JetBrains выходит дайджест PHP Annotated Monthly https://blog.jetbrains.com/phpstorm/category/php-annotated-monthly/ (аналогичные публикации от JetBrains есть ещё только по теме Java Annotated Monthly)
Backend сервисы Slack написаны на PHP и команда считает, что это правильный выбор https://slack.engineering/taking-php-seriously-cf7a60065329
Backend крупнейшей фриланс биржи Upwork написан на PHP https://sdcast.ksdaemon.ru/2016/10/sdcast-49/
Сайте белого дома США https://www.whitehouse.gov/ работает на Drupal - CMS на PHP. Все наработки в OpenSource: https://github.com/whitehouse
